% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/perf.R
\name{perf_psi}
\alias{perf_psi}
\title{psi}
\usage{
perf_psi(label_train, score_train, label_test, score_test, title = "PSI",
  positive = "bad|1", plot = TRUE, x_limits = c(100, 650),
  x_tick_break = 50, line_total = FALSE, seed = 186)
}
\arguments{
\item{label_train}{label values of training dataset, such as 0s and 1s.}

\item{score_train}{credit score of training dataset.}

\item{label_test}{label values of testing dataset, such as 0s and 1s.}

\item{score_test}{credit score of testing dataset.}

\item{title}{plot title, default "train".}

\item{positive}{Name of positive class, defaults: bad or 1.}

\item{plot}{logical value, default TRUE. It means whether to display plot.}

\item{x_tick_break}{xaxis ticker break, default 100}

\item{line_total}{logical value, default FALSE, which means not display the line of total PSI}

\item{seed}{seed value for random sort data frame, defalut: 186.}

\item{xlimits}{xaxis limits, default c(0, 800)}
}
\value{
psi
}
\description{
This function provides population stability index (PSI).
}
\examples{
# # Traditional Credit Scoring Using Logistic Regression
# library(woebin)
# # load germancredit data
# data("germancredit")
#
# # rename creditability as y
# dt <- data.table(germancredit)[, `:=`(
#   y = ifelse(creditability == "bad", 1, 0),
#   creditability = NULL
# )]
#
# # breaking dt into train and test ------
# set.seed(125)
# dt <- dt[sample(nrow(dt))]
# # rowname of train
# set.seed(345)
# rn <- sample(nrow(dt), nrow(dt)*0.6)
# # train and test dt
# dt_train <- dt[rn]; dt_test <- dt[-rn];
#
# # woe binning ------
# bins <- woebin(dt_train, "y")$bins
#
# train <- woebin_ply(dt_train, "y", bins)
# test <- woebin_ply(dt_test, "y", bins)
#
# # glm ------
# m1 <- glm( y ~ ., family = "binomial", data = train)
# # summary(m1)
#
# # Select a formula-based model by AIC
# m_step <- step(m1, direction="both")
# m2 <- eval(m_step$call)
# # summary(m2)
#
# # performance ------
# # predicted proability
# train$pred <- predict(m2, type='response', train)
# test$pred <- predict(m2, type='response', test)
#
# # ks & roc plot
# perf_plot(train$y, train$pred, title = "train")
# perf_plot(train$y, train$pred, title = "test")
#
# # score
# train$score <- scorecards(train, "y", bins, m2)$score
# test$score <- scorecards(test, "y", bins, m2)$score
#
# # psi
# perf_psi(train$y, train$score, test$y, test$score, x_limits = c(0, 700), x_tick_break = 100)

}
