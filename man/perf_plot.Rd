% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/perf.R
\name{perf_plot}
\alias{perf_plot}
\title{ks, roc, lift, pr}
\usage{
perf_plot(label, pred, title = "train", groupnum = 20, type = c("ks",
  "roc"), positive = "bad|1", plot = TRUE, seed = 186)
}
\arguments{
\item{label}{label values, such as 0s and 1s.}

\item{pred}{predicted probability values.}

\item{title}{plot title, default "train".}

\item{groupnum}{the number of group numbers, default: 20.}

\item{type}{performance plot types, such as "ks","lift","roc","pr", default: c("ks", "roc").}

\item{positive}{value of positive class, defaults: bad or 1.}

\item{plot}{logical value, default TRUE.}

\item{seed}{seed value for random sort data frame, defalut: 186.}
}
\value{
ks, roc, lift, pr
}
\description{
This function provides kolmogorov-smirnow(ks), ROC, lift and precision-recall curves based on label and predicted probability values.
}
\examples{
# # Traditional Credit Scoring Using Logistic Regression
# library(woebin)
# # load germancredit data
# data("germancredit")
#
# # rename creditability as y
# dt <- data.table(germancredit)[, `:=`(
#   y = ifelse(creditability == "bad", 1, 0),
#   creditability = NULL
# )]
#
# # woe binning ------
# bins <- woebin(dt, "y")$bins
# dt_woe <- woebin_ply(dt, "y", bins)
#
# # glm ------
# m1 <- glm( y ~ ., family = "binomial", data = dt_woe)
# # summary(m1)
#
# # Select a formula-based model by AIC
# m_step <- step(m1, direction="both")
# m2 <- eval(m_step$call)
# # summary(m2)
#
# # performance ------
# # predicted proability
# dt_woe$pred <- predict(m2, type='response', dt_woe)
#
# # performace
# # only ks & auc values
# perf_plot(dt_woe$y, dt_woe$pred, plot=FALSE)
#
# # ks & roc plot
# perf_plot(dt_woe$y, dt_woe$pred)
#
# # ks, lift, roc & pr plot
# perf_plot(dt_woe$y, dt_woe$pred, type = c("ks","lift","roc","pr"))

}
